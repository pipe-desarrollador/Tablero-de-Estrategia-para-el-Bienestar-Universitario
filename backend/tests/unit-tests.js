/**
 * ARCHIVO DE TESTS UNITARIOS
 * =========================
 * 
 * Este archivo contiene 30 tests organizados en 10 suites que verifican
 * la funcionalidad y calidad del sistema de bienestar universitario.
 * 
 * Cada suite de tests verifica un aspecto espec√≠fico del sistema:
 * - Suite 1: Funciones de utilidad (normalizaci√≥n de texto)
 * - Suite 2: Detecci√≥n de separadores CSV
 * - Suite 3: Validaci√≥n de datos de entrada
 * - Suite 4: Construcci√≥n de queries SQL
 * - Suite 5: Sistema de paginaci√≥n
 * - Suite 6: C√°lculos estad√≠sticos
 * - Suite 7: Manejo de errores
 * - Suite 8: Configuraci√≥n del sistema
 * - Suite 9: Validaci√≥n de entrada de datos
 * - Suite 10: Utilidades de arrays
 * 
 * Autor: Sistema de Bienestar Universitario
 * Fecha: 2024
 */

const assert = require('assert');

// ============================================================================
// FUNCIONES AUXILIARES PARA PRUEBAS
// ============================================================================

/**
 * Funci√≥n para remover acentos de texto
 * Prop√≥sito: Normalizar texto para comparaciones sin importar acentos
 * Ejemplo: "√°√©√≠√≥√∫" ‚Üí "aeiou"
 */
const removeAccents = (s='') => s.normalize('NFD').replace(/[\u0300-\u036f]/g, '');

/**
 * Funci√≥n para normalizar texto
 * Prop√≥sito: Limpiar y normalizar texto para comparaciones consistentes
 * - Remueve acentos
 * - Convierte a min√∫sculas
 * - Elimina espacios extra
 * - Remueve caracteres BOM
 */
const norm = (s='') => removeAccents(String(s).replace(/^\ufeff/, '')).trim().toLowerCase().replace(/\s+/g,' ');

// ============================================================================
// SUITE 1: FUNCIONES DE UTILIDAD
// ============================================================================
// Esta suite verifica las funciones auxiliares para normalizaci√≥n de texto

function testFuncionesUtilidad() {
  console.log('üìã Suite 1: Funciones de Utilidad');
  
  // Test 1: Verificar que la funci√≥n removeAccents funcione correctamente
  // Prop√≥sito: Asegurar que los acentos se remuevan correctamente del texto
  try {
    assert.strictEqual(removeAccents('√°√©√≠√≥√∫√±'), 'aeioun'); // Min√∫sculas con acentos
    assert.strictEqual(removeAccents('√Å√â√ç√ì√ö√ë'), 'AEIOUN'); // May√∫sculas con acentos
    assert.strictEqual(removeAccents('sin acentos'), 'sin acentos'); // Texto sin acentos
    console.log('   ‚úÖ Test 1: removeAccents - Pas√≥');
  } catch (error) {
    console.log('   ‚ùå Test 1: removeAccents - Fall√≥:', error.message);
  }

  // Test 2: Verificar que la funci√≥n norm normalice texto correctamente
  // Prop√≥sito: Asegurar que el texto se normalice (espacios, acentos, may√∫sculas)
  try {
    assert.strictEqual(norm('  Hola  Mundo  '), 'hola mundo'); // Espacios extra
    assert.strictEqual(norm('√Å√â√ç√ì√ö'), 'aeiou'); // Acentos y may√∫sculas
    assert.strictEqual(norm(''), ''); // Cadena vac√≠a
    console.log('   ‚úÖ Test 2: norm - Pas√≥');
  } catch (error) {
    console.log('   ‚ùå Test 2: norm - Fall√≥:', error.message);
  }

  // Test 3: Verificar normalizaci√≥n de caracteres especiales
  // Prop√≥sito: Asegurar que caracteres especiales se normalicen correctamente
  try {
    assert.strictEqual(norm('g√©nero'), 'genero'); // √± ‚Üí n
    assert.strictEqual(norm('edad'), 'edad'); // Sin cambios
    assert.strictEqual(norm('tipo de estr√©s'), 'tipo de estres'); // √© ‚Üí e
    console.log('   ‚úÖ Test 3: norm caracteres especiales - Pas√≥');
  } catch (error) {
    console.log('   ‚ùå Test 3: norm caracteres especiales - Fall√≥:', error.message);
  }
}

// ============================================================================
// SUITE 2: DETECCI√ìN DE SEPARADORES CSV
// ============================================================================
// Esta suite verifica la detecci√≥n autom√°tica de separadores en archivos CSV

function testDeteccionSeparadores() {
  console.log('üìã Suite 2: Detecci√≥n de Separadores CSV');
  
  /**
   * Funci√≥n para detectar el separador de un archivo CSV
   * Prop√≥sito: Identificar autom√°ticamente si el CSV usa ; , o \t como separador
   * L√≥gica: Cuenta cada tipo de separador y devuelve el m√°s frecuente
   */
  const detectSeparator = (buf) => {
    const head = buf.toString('utf8').split(/\r?\n/)[0] || ''; // Primera l√≠nea del archivo
    const count = (ch) => (head.match(new RegExp(`\\${ch}`, 'g')) || []).length; // Contar caracteres
    const semis = count(';'), commas = count(','), tabs = count('\t'); // Contar cada separador
    if (semis >= commas && semis >= tabs) return ';'; // Punto y coma es m√°s frecuente
    if (commas >= tabs) return ','; // Coma es m√°s frecuente
    return '\t'; // Tabulaci√≥n es m√°s frecuente
  };

  // Test 4: Verificar detecci√≥n de separador punto y coma
  // Prop√≥sito: Asegurar que se detecte correctamente el separador ;
  try {
    const csvData = Buffer.from('col1;col2;col3\nval1;val2;val3'); // CSV con punto y coma
    assert.strictEqual(detectSeparator(csvData), ';'); // Debe detectar punto y coma
    console.log('   ‚úÖ Test 4: detectSeparator punto y coma - Pas√≥');
  } catch (error) {
    console.log('   ‚ùå Test 4: detectSeparator punto y coma - Fall√≥:', error.message);
  }

  // Test 5: Verificar detecci√≥n de separador coma
  // Prop√≥sito: Asegurar que se detecte correctamente el separador ,
  try {
    const csvData = Buffer.from('col1,col2,col3\nval1,val2,val3'); // CSV con coma
    assert.strictEqual(detectSeparator(csvData), ','); // Debe detectar coma
    console.log('   ‚úÖ Test 5: detectSeparator coma - Pas√≥');
  } catch (error) {
    console.log('   ‚ùå Test 5: detectSeparator coma - Fall√≥:', error.message);
  }

  // Test 6: Verificar detecci√≥n de separador tabulaci√≥n
  // Prop√≥sito: Asegurar que se detecte correctamente el separador \t
  try {
    const csvData = Buffer.from('col1\tcol2\tcol3\nval1\tval2\tval3'); // CSV con tabulaci√≥n
    assert.strictEqual(detectSeparator(csvData), '\t'); // Debe detectar tabulaci√≥n
    console.log('   ‚úÖ Test 6: detectSeparator tabulaci√≥n - Pas√≥');
  } catch (error) {
    console.log('   ‚ùå Test 6: detectSeparator tabulaci√≥n - Fall√≥:', error.message);
  }
}

// ============================================================================
// SUITE 3: VALIDACI√ìN DE DATOS
// ============================================================================
// Esta suite verifica la validaci√≥n de datos de entrada del usuario

function testValidacionDatos() {
  console.log('üìã Suite 3: Validaci√≥n de Datos');
  
  // Test 7: Verificar validaci√≥n de edades v√°lidas
  // Prop√≥sito: Asegurar que las edades v√°lidas sean aceptadas por el sistema
  try {
    const validAges = [18, 25, 30, 50]; // Edades v√°lidas para estudiantes universitarios
    validAges.forEach(age => {
      assert.strictEqual(Number.isFinite(parseInt(age, 10)), true); // Debe ser un n√∫mero v√°lido
    });
    console.log('   ‚úÖ Test 7: Validaci√≥n edad v√°lida - Pas√≥');
  } catch (error) {
    console.log('   ‚ùå Test 7: Validaci√≥n edad v√°lida - Fall√≥:', error.message);
  }

  // Test 8: Verificar validaci√≥n de edades inv√°lidas
  // Prop√≥sito: Asegurar que las edades inv√°lidas sean rechazadas por el sistema
  try {
    const invalidAges = ['abc', '', null, undefined, -5]; // Edades inv√°lidas
    invalidAges.forEach(age => {
      const parsed = parseInt(age, 10);
      // -5 es un n√∫mero v√°lido, as√≠ que lo excluimos de la validaci√≥n
      if (age !== -5) {
        assert.strictEqual(Number.isFinite(parsed), false); // Debe ser rechazado
      }
    });
    // Verificar que -5 s√≠ es un n√∫mero v√°lido
    assert.strictEqual(Number.isFinite(parseInt(-5, 10)), true);
    console.log('   ‚úÖ Test 8: Validaci√≥n edad inv√°lida - Pas√≥');
  } catch (error) {
    console.log('   ‚ùå Test 8: Validaci√≥n edad inv√°lida - Fall√≥:', error.message);
  }

  // Test 9: Verificar validaci√≥n de g√©neros v√°lidos
  // Prop√≥sito: Asegurar que los g√©neros v√°lidos sean aceptados por el sistema
  try {
    const validGenders = ['F', 'M', 'Female', 'Male', 'Femenino', 'Masculino']; // G√©neros v√°lidos
    validGenders.forEach(gender => {
      assert.strictEqual(typeof gender === 'string' && gender.length > 0, true); // Debe ser texto no vac√≠o
    });
    console.log('   ‚úÖ Test 9: Validaci√≥n g√©nero - Pas√≥');
  } catch (error) {
    console.log('   ‚ùå Test 9: Validaci√≥n g√©nero - Fall√≥:', error.message);
  }
}

// ============================================================================
// SUITE 4: CONSTRUCCI√ìN DE QUERIES SQL
// ============================================================================
// Esta suite verifica la construcci√≥n correcta de consultas SQL para la base de datos

function testConstruccionQueries() {
  console.log('üìã Suite 4: Construcci√≥n de Queries SQL');
  
  // Test 10: Verificar construcci√≥n de placeholders para consultas SQL
  // Prop√≥sito: Asegurar que los placeholders se generen correctamente para prevenir SQL injection
  try {
    const cols = ['id', 'name', 'age']; // Columnas de la tabla
    const placeholders = cols.map((_, i) => `$${i + 1}`).join(', '); // Generar $1, $2, $3
    assert.strictEqual(placeholders, '$1, $2, $3'); // Debe generar placeholders correctos
    console.log('   ‚úÖ Test 10: Query b√°sica - Pas√≥');
  } catch (error) {
    console.log('   ‚ùå Test 10: Query b√°sica - Fall√≥:', error.message);
  }

  // Test 11: Verificar construcci√≥n de cl√°usulas WHERE
  // Prop√≥sito: Asegurar que las condiciones WHERE se construyan correctamente
  try {
    const where = ['age >= $1', 'gender = $2']; // Condiciones de filtro
    const whereSql = where.join(' AND '); // Unir con AND
    assert.strictEqual(whereSql, 'age >= $1 AND gender = $2'); // Debe generar SQL correcto
    console.log('   ‚úÖ Test 11: Query con filtros - Pas√≥');
  } catch (error) {
    console.log('   ‚ùå Test 11: Query con filtros - Fall√≥:', error.message);
  }

  // Test 12: Verificar construcci√≥n de consultas INSERT
  // Prop√≥sito: Asegurar que las consultas de inserci√≥n se construyan correctamente
  try {
    const cols = ['name', 'age']; // Columnas a insertar
    const placeholders = cols.map((_, i) => `$${i + 1}`).join(', '); // Generar placeholders
    const sql = `INSERT INTO users (${cols.join(',')}) VALUES (${placeholders})`; // Construir SQL
    assert.strictEqual(sql, 'INSERT INTO users (name,age) VALUES ($1, $2)'); // Debe generar SQL correcto
    console.log('   ‚úÖ Test 12: Query de inserci√≥n - Pas√≥');
  } catch (error) {
    console.log('   ‚ùå Test 12: Query de inserci√≥n - Fall√≥:', error.message);
  }
}

// ============================================================================
// SUITE 5: PAGINACI√ìN
// ============================================================================
// Esta suite verifica el sistema de paginaci√≥n para manejar grandes vol√∫menes de datos

function testPaginacion() {
  console.log('üìã Suite 5: Paginaci√≥n');
  
  // Test 13: Verificar c√°lculo de offset para la primera p√°gina
  // Prop√≥sito: Asegurar que el offset se calcule correctamente para la p√°gina 1
  try {
    const pageSize = 25; // Tama√±o de p√°gina est√°ndar
    const page = 1; // Primera p√°gina
    const offset = (page - 1) * pageSize; // Calcular offset: (1-1) * 25 = 0
    assert.strictEqual(offset, 0); // La primera p√°gina debe empezar en 0
    console.log('   ‚úÖ Test 13: C√°lculo offset p√°gina 1 - Pas√≥');
  } catch (error) {
    console.log('   ‚ùå Test 13: C√°lculo offset p√°gina 1 - Fall√≥:', error.message);
  }

  // Test 14: Verificar c√°lculo de offset para la segunda p√°gina
  // Prop√≥sito: Asegurar que el offset se calcule correctamente para p√°ginas siguientes
  try {
    const pageSize = 25; // Tama√±o de p√°gina est√°ndar
    const page = 2; // Segunda p√°gina
    const offset = (page - 1) * pageSize; // Calcular offset: (2-1) * 25 = 25
    assert.strictEqual(offset, 25); // La segunda p√°gina debe empezar en 25
    console.log('   ‚úÖ Test 14: C√°lculo offset p√°gina 2 - Pas√≥');
  } catch (error) {
    console.log('   ‚ùå Test 14: C√°lculo offset p√°gina 2 - Fall√≥:', error.message);
  }

  // Test 15: Verificar l√≠mite m√°ximo de tama√±o de p√°gina
  // Prop√≥sito: Asegurar que el sistema limite el tama√±o de p√°gina para evitar sobrecarga
  try {
    const requestedSize = 300; // Tama√±o solicitado por el usuario
    const maxSize = 200; // L√≠mite m√°ximo del sistema
    const actualSize = Math.min(maxSize, Math.max(1, requestedSize)); // Aplicar l√≠mites
    assert.strictEqual(actualSize, 200); // Debe limitar a 200, no permitir 300
    console.log('   ‚úÖ Test 15: L√≠mite pageSize - Pas√≥');
  } catch (error) {
    console.log('   ‚ùå Test 15: L√≠mite pageSize - Fall√≥:', error.message);
  }
}

// ============================================================================
// SUITE 6: ESTAD√çSTICAS
// ============================================================================
// Esta suite verifica los c√°lculos estad√≠sticos para an√°lisis de datos

function testEstadisticas() {
  console.log('üìã Suite 6: Estad√≠sticas');
  
  // Test 16: Verificar c√°lculo de promedio
  // Prop√≥sito: Asegurar que el promedio se calcule correctamente para an√°lisis estad√≠stico
  try {
    const values = [1, 2, 3, 4, 5]; // Valores de ejemplo
    const avg = values.reduce((a, b) => a + b, 0) / values.length; // Suma total / cantidad
    assert.strictEqual(avg, 3); // Promedio de 1,2,3,4,5 = 3
    console.log('   ‚úÖ Test 16: C√°lculo promedio - Pas√≥');
  } catch (error) {
    console.log('   ‚ùå Test 16: C√°lculo promedio - Fall√≥:', error.message);
  }

  // Test 17: Verificar c√°lculo de porcentaje
  // Prop√≥sito: Asegurar que los porcentajes se calculen correctamente para reportes
  try {
    const total = 100; // Total de elementos
    const count = 25; // Cantidad espec√≠fica
    const percentage = (count / total) * 100; // Calcular porcentaje: (25/100) * 100
    assert.strictEqual(percentage, 25); // 25 de 100 = 25%
    console.log('   ‚úÖ Test 17: C√°lculo porcentaje - Pas√≥');
  } catch (error) {
    console.log('   ‚ùå Test 17: C√°lculo porcentaje - Fall√≥:', error.message);
  }

  // Test 18: Verificar redondeo de decimales
  // Prop√≥sito: Asegurar que los n√∫meros se redondeen correctamente para presentaci√≥n
  try {
    const value = 3.14159; // N√∫mero con muchos decimales
    const rounded = Math.round(value * 100) / 100; // Redondear a 2 decimales
    assert.strictEqual(rounded, 3.14); // Debe redondear a 3.14
    console.log('   ‚úÖ Test 18: Redondeo decimales - Pas√≥');
  } catch (error) {
    console.log('   ‚ùå Test 18: Redondeo decimales - Fall√≥:', error.message);
  }
}

// ============================================================================
// SUITE 7: MANEJO DE ERRORES
// ============================================================================
// Esta suite verifica el manejo correcto de errores en el sistema

function testManejoErrores() {
  console.log('üìã Suite 7: Manejo de Errores');
  
  // Test 19: Verificar manejo de error de archivo no proporcionado
  // Prop√≥sito: Asegurar que el sistema maneje correctamente cuando no se sube archivo
  try {
    const error = 'No file part in the request'; // Mensaje de error est√°ndar
    assert.strictEqual(typeof error, 'string'); // Debe ser una cadena de texto
    assert.strictEqual(error.length > 0, true); // No debe estar vac√≠o
    console.log('   ‚úÖ Test 19: Error archivo no proporcionado - Pas√≥');
  } catch (error) {
    console.log('   ‚ùå Test 19: Error archivo no proporcionado - Fall√≥:', error.message);
  }

  // Test 20: Verificar manejo de error de CSV vac√≠o
  // Prop√≥sito: Asegurar que el sistema maneje correctamente archivos CSV sin datos
  try {
    const error = 'CSV vac√≠o'; // Mensaje de error para CSV vac√≠o
    assert.strictEqual(typeof error, 'string'); // Debe ser una cadena de texto
    assert.strictEqual(error.length > 0, true); // No debe estar vac√≠o
    console.log('   ‚úÖ Test 20: Error CSV vac√≠o - Pas√≥');
  } catch (error) {
    console.log('   ‚ùå Test 20: Error CSV vac√≠o - Fall√≥:', error.message);
  }

  // Test 21: Verificar manejo de error de formato no reconocido
  // Prop√≥sito: Asegurar que el sistema maneje correctamente formatos de archivo inv√°lidos
  try {
    const error = 'Formato de CSV no reconocido'; // Mensaje de error para formato inv√°lido
    assert.strictEqual(typeof error, 'string'); // Debe ser una cadena de texto
    assert.strictEqual(error.length > 0, true); // No debe estar vac√≠o
    console.log('   ‚úÖ Test 21: Error formato no reconocido - Pas√≥');
  } catch (error) {
    console.log('   ‚ùå Test 21: Error formato no reconocido - Fall√≥:', error.message);
  }
}

// ============================================================================
// SUITE 8: CONFIGURACI√ìN
// ============================================================================
// Esta suite verifica la configuraci√≥n del sistema y archivos de configuraci√≥n

function testConfiguracion() {
  console.log('üìã Suite 8: Configuraci√≥n');
  
  // Test 22: Verificar configuraci√≥n de base de datos
  // Prop√≥sito: Asegurar que la configuraci√≥n de PostgreSQL tenga los tipos correctos
  try {
    const config = {
      user: 'postgres', // Usuario de la base de datos
      host: 'localhost', // Host de la base de datos
      database: 'stress_db', // Nombre de la base de datos
      password: 'admin123', // Contrase√±a de la base de datos
      port: 5432 // Puerto de PostgreSQL
    };
    
    assert.strictEqual(typeof config.user, 'string'); // Usuario debe ser texto
    assert.strictEqual(typeof config.host, 'string'); // Host debe ser texto
    assert.strictEqual(typeof config.database, 'string'); // Base de datos debe ser texto
    assert.strictEqual(typeof config.password, 'string'); // Contrase√±a debe ser texto
    assert.strictEqual(typeof config.port, 'number'); // Puerto debe ser n√∫mero
    console.log('   ‚úÖ Test 22: Configuraci√≥n base de datos - Pas√≥');
  } catch (error) {
    console.log('   ‚ùå Test 22: Configuraci√≥n base de datos - Fall√≥:', error.message);
  }

  // Test 23: Verificar configuraci√≥n de Swagger/OpenAPI
  // Prop√≥sito: Asegurar que la documentaci√≥n de la API est√© correctamente configurada
  try {
    const swaggerConfig = {
      definition: {
        openapi: '3.0.0', // Versi√≥n de OpenAPI
        info: {
          title: 'API de Dataset de Estr√©s Estudiantil', // T√≠tulo de la API
          version: '1.0.0' // Versi√≥n de la API
        }
      }
    };
    
    assert.strictEqual(swaggerConfig.definition.openapi, '3.0.0'); // Debe usar OpenAPI 3.0.0
    assert.strictEqual(swaggerConfig.definition.info.title, 'API de Dataset de Estr√©s Estudiantil'); // T√≠tulo correcto
    assert.strictEqual(swaggerConfig.definition.info.version, '1.0.0'); // Versi√≥n correcta
    console.log('   ‚úÖ Test 23: Configuraci√≥n Swagger - Pas√≥');
  } catch (error) {
    console.log('   ‚ùå Test 23: Configuraci√≥n Swagger - Fall√≥:', error.message);
  }

  // Test 24: Verificar estructura del package.json
  // Prop√≥sito: Asegurar que el archivo package.json tenga la estructura correcta
  try {
    const packageJson = require('../package.json'); // Cargar package.json
    assert.strictEqual(typeof packageJson.name, 'string'); // Nombre debe ser texto
    assert.strictEqual(typeof packageJson.version, 'string'); // Versi√≥n debe ser texto
    assert.strictEqual(typeof packageJson.dependencies, 'object'); // Dependencias debe ser objeto
    assert.strictEqual(Array.isArray(packageJson.scripts), false); // scripts es un objeto, no array
    console.log('   ‚úÖ Test 24: Package.json v√°lido - Pas√≥');
  } catch (error) {
    console.log('   ‚ùå Test 24: Package.json v√°lido - Fall√≥:', error.message);
  }
}

// ============================================================================
// SUITE 9: VALIDACI√ìN DE ENTRADA
// ============================================================================
// Esta suite verifica las funciones de validaci√≥n de datos de entrada

function testValidacionEntrada() {
  console.log('üìã Suite 9: Validaci√≥n de Entrada');
  
  // Test 25: Verificar validaci√≥n de email
  // Prop√≥sito: Asegurar que las direcciones de email se validen correctamente
  try {
    const isValidEmail = (email) => {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/; // Expresi√≥n regular para email
      return emailRegex.test(email); // Probar si el email es v√°lido
    };
    
    assert.strictEqual(isValidEmail('test@example.com'), true); // Email v√°lido debe pasar
    assert.strictEqual(isValidEmail('invalid-email'), false); // Email inv√°lido debe fallar
    console.log('   ‚úÖ Test 25: Validaci√≥n email - Pas√≥');
  } catch (error) {
    console.log('   ‚ùå Test 25: Validaci√≥n email - Fall√≥:', error.message);
  }

  // Test 26: Verificar validaci√≥n de n√∫meros
  // Prop√≥sito: Asegurar que los n√∫meros se validen correctamente
  try {
    const isValidNumber = (num) => {
      return !isNaN(num) && isFinite(num); // No debe ser NaN y debe ser finito
    };
    
    assert.strictEqual(isValidNumber(123), true); // N√∫mero v√°lido debe pasar
    assert.strictEqual(isValidNumber('abc'), false); // Texto debe fallar
    console.log('   ‚úÖ Test 26: Validaci√≥n n√∫mero - Pas√≥');
  } catch (error) {
    console.log('   ‚ùå Test 26: Validaci√≥n n√∫mero - Fall√≥:', error.message);
  }

  // Test 27: Verificar validaci√≥n de cadenas de texto
  // Prop√≥sito: Asegurar que las cadenas de texto se validen correctamente
  try {
    const isValidString = (str) => {
      return typeof str === 'string' && str.trim().length > 0; // Debe ser texto y no vac√≠o
    };
    
    assert.strictEqual(isValidString('hello'), true); // Texto v√°lido debe pasar
    assert.strictEqual(isValidString(''), false); // Cadena vac√≠a debe fallar
    assert.strictEqual(isValidString('   '), false); // Solo espacios debe fallar
    console.log('   ‚úÖ Test 27: Validaci√≥n string - Pas√≥');
  } catch (error) {
    console.log('   ‚ùå Test 27: Validaci√≥n string - Fall√≥:', error.message);
  }
}

// ============================================================================
// SUITE 10: UTILIDADES DE ARRAY
// ============================================================================
// Esta suite verifica las funciones de manipulaci√≥n de arrays

function testUtilidadesArray() {
  console.log('üìã Suite 10: Utilidades de Array');
  
  // Test 28: Verificar filtrado de arrays
  // Prop√≥sito: Asegurar que el filtrado de arrays funcione correctamente
  try {
    const array = [1, 2, 3, 4, 5]; // Array de ejemplo
    const filtered = array.filter(x => x > 2); // Filtrar n√∫meros mayores a 2
    assert.strictEqual(filtered.length, 3); // Debe quedar 3 elementos [3, 4, 5]
    assert.strictEqual(filtered[0], 3); // El primer elemento debe ser 3
    console.log('   ‚úÖ Test 28: Filtrado de arrays - Pas√≥');
  } catch (error) {
    console.log('   ‚ùå Test 28: Filtrado de arrays - Fall√≥:', error.message);
  }

  // Test 29: Verificar mapeo de arrays
  // Prop√≥sito: Asegurar que el mapeo de arrays funcione correctamente
  try {
    const array = [1, 2, 3, 4, 5]; // Array de ejemplo
    const mapped = array.map(x => x * 2); // Multiplicar cada elemento por 2
    assert.strictEqual(mapped.length, 5); // Debe mantener la misma longitud
    assert.strictEqual(mapped[0], 2); // Primer elemento: 1 * 2 = 2
    assert.strictEqual(mapped[4], 10); // √öltimo elemento: 5 * 2 = 10
    console.log('   ‚úÖ Test 29: Mapeo de arrays - Pas√≥');
  } catch (error) {
    console.log('   ‚ùå Test 29: Mapeo de arrays - Fall√≥:', error.message);
  }

  // Test 30: Verificar reducci√≥n de arrays
  // Prop√≥sito: Asegurar que la reducci√≥n de arrays funcione correctamente
  try {
    const array = [1, 2, 3, 4, 5]; // Array de ejemplo
    const reduced = array.reduce((sum, num) => sum + num, 0); // Sumar todos los elementos
    assert.strictEqual(reduced, 15); // Suma: 1+2+3+4+5 = 15
    console.log('   ‚úÖ Test 30: Reducci√≥n de arrays - Pas√≥');
  } catch (error) {
    console.log('   ‚ùå Test 30: Reducci√≥n de arrays - Fall√≥:', error.message);
  }
}

// ============================================================================
// FUNCI√ìN PRINCIPAL PARA EJECUTAR TODAS LAS PRUEBAS
// ============================================================================

/**
 * Funci√≥n principal que ejecuta todas las suites de pruebas
 * Prop√≥sito: Ejecutar los 30 tests organizados en 10 suites
 * Retorna: Objeto con estad√≠sticas de los tests ejecutados
 */
function runAllTests() {
  console.log('üß™ Ejecutando 30 pruebas unitarias...\n');
  
  let passedTests = 0;
  const totalTests = 30;
  
  // Array con todas las suites de pruebas a ejecutar
  const testSuites = [
    testFuncionesUtilidad,      // Suite 1: Funciones de utilidad
    testDeteccionSeparadores,   // Suite 2: Detecci√≥n de separadores CSV
    testValidacionDatos,        // Suite 3: Validaci√≥n de datos
    testConstruccionQueries,    // Suite 4: Construcci√≥n de queries SQL
    testPaginacion,             // Suite 5: Sistema de paginaci√≥n
    testEstadisticas,           // Suite 6: C√°lculos estad√≠sticos
    testManejoErrores,          // Suite 7: Manejo de errores
    testConfiguracion,          // Suite 8: Configuraci√≥n del sistema
    testValidacionEntrada,      // Suite 9: Validaci√≥n de entrada
    testUtilidadesArray         // Suite 10: Utilidades de arrays
  ];
  
  // Ejecutar cada suite de pruebas
  testSuites.forEach((suite, index) => {
    try {
      suite(); // Ejecutar la suite
      passedTests += 3; // Cada suite tiene 3 tests
      console.log(''); // L√≠nea en blanco para separar suites
    } catch (error) {
      console.log(`‚ùå Error en Suite ${index + 1}:`, error.message);
    }
  });
  
  // Mostrar resumen de resultados
  console.log('='.repeat(50));
  console.log(`üìä RESULTADOS: ${passedTests}/${totalTests} pruebas pasaron`);
  console.log(`üéØ Tasa de √©xito: ${((passedTests / totalTests) * 100).toFixed(1)}%`);
  console.log('='.repeat(50));
  
  // Retornar estad√≠sticas para uso program√°tico
  return {
    passed: passedTests,
    total: totalTests,
    successRate: (passedTests / totalTests) * 100
  };
}

// ============================================================================
// EJECUCI√ìN Y EXPORTACI√ìN
// ============================================================================

// Ejecutar autom√°ticamente si el archivo se ejecuta directamente
if (require.main === module) {
  runAllTests();
}

// Exportar la funci√≥n para uso en otros m√≥dulos
module.exports = { runAllTests };
